package com.donearh.hearme;

import java.io.BufferedReader;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;

import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.NameValuePair;
import org.apache.http.client.HttpClient;
import org.apache.http.client.entity.UrlEncodedFormEntity;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.message.BasicNameValuePair;
import org.apache.http.protocol.HTTP;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import com.donearh.hearme.DownloadFragment.DownloadCompleteListener;
import com.donearh.hearme.library.JSONArrayParser;
import com.donearh.hearme.library.JSONArrayParser.GetJSONArrayListener;
import com.donearh.hearme.library.JSONParser;
import com.donearh.hearme.library.JSONParser.GetJSONListener;

import android.app.ProgressDialog;
import android.content.Context;
import android.content.Intent;
import android.net.ParseException;
import android.os.AsyncTask;
import android.support.v4.app.Fragment;
import android.support.v4.app.FragmentManager;
import android.util.Log;

public class DownloadData extends AsyncTask<URLWithParams, Void, ArrayList<? extends Object>>
{
	
	private static String get_ad_list_tag = "get_ad_list";
	
	static final int MAIN_DATA_CATEGORY = 0;
	static final int CHECK_USER = 1;
	static final int LOAD_AD_LIST = 2;
	static final int GET_FAV_USERS_NAMES = 3;
	static final int GET_MORE_AD = 4;
	static final int GET_MORE_AD_DETAILS = 5;
	static final int GET_SLIDER_URLS = 6;
	
	private Context mContext;
	private int mLoadType;
	private JSONArray jArray;
	private String result = null;
	private InputStream is = null;
	private StringBuilder sb = null;
	
	private MainPage mMainPage;
	private LoginActivity mLoginActivity;
	
	private String mUserLogin;
	private String mUserPass;
	private ArrayList<AdListData> mAdListData;
	
	private ArrayList<CategoryData> mCategoryData;
	private ArrayList<String> mSliderData;
	
	private ArrayList<String> mFavUsersList;
	
	private MainControlBarActivity mMainControlBarActivity;
	
	DownloadDCompleteListener mDownloadDCompleteListener;
	
	public interface DownloadDCompleteListener
	{
		public void getDownloadDCompleteState(int loadType, ArrayList<? extends Object> ad_list);
	}
	
	public void setListener(DownloadDCompleteListener listener)
	{
		this.mDownloadDCompleteListener = listener;
	}
	
	protected DownloadData(int type, Context context)
	{
		mContext = context;
		mLoadType = type;
		mAdListData = new ArrayList<AdListData>();
		mCategoryData = new ArrayList<CategoryData>();
		mFavUsersList = new ArrayList<String>();
		
		switch(mLoadType){
		case MAIN_DATA_CATEGORY:
			mMainControlBarActivity = ((MainControlBarActivity)context);
			break;
		case GET_SLIDER_URLS:
			mSliderData = new ArrayList<String>();
			break;
		}
	}
	
	@Override
	protected void onPreExecute() {
		// TODO Auto-generated method stub
		super.onPreExecute();
	}

	public void setMainPage(MainPage page)
	{
		mMainPage = page;
		
	}
	
	public void setLoginActivity(LoginActivity activity)
	{
		mLoginActivity = activity;
	}

	
	@Override
	protected ArrayList<? extends Object> doInBackground(URLWithParams... params)
	{
		//http post
		try
		{
		     HttpClient httpclient = new DefaultHttpClient();
		     String url = params[0].url;
		     HttpPost httppost = new HttpPost(url);
		     httppost.setEntity(new UrlEncodedFormEntity(params[0].nameValuePairs));
		     HttpResponse response = httpclient.execute(httppost);
		     HttpEntity entity = response.getEntity();
		     is = entity.getContent();
		}
		catch(Exception e)
		{
		   Log.e("doni_error", "Error in http connection"+e.toString());
		   return null;
		}
		
		//convert response to string
		try
		{
		  BufferedReader reader = new BufferedReader(new InputStreamReader(is,HTTP.UTF_8));
		  sb = new StringBuilder();
		  sb.append(reader.readLine() + "\n");

		  String line="0";
		  while ((line = reader.readLine()) != null) 
		  {
		      sb.append(line + "\n");
		  }
		  is.close();
		  result=sb.toString();
		}
		catch(Exception e)
		{
			
		   Log.e("doni_error", "Error converting result "+e.toString());
		   return null;
		}
		
		//paring data
		
		try
		{
			mAdListData = new ArrayList<AdListData>();
		      jArray = new JSONArray(result);
		      JSONObject json_data=null;
		      for(int i=0;i<jArray.length();i++)
		      {
		    	  json_data = jArray.getJSONObject(i);
		    	  if(mLoadType == MAIN_DATA_CATEGORY)
		    	  {
		    		  CategoryData data = new CategoryData();
		    		  data.Id = json_data.getInt("category_id");
		    		  data.Name = json_data.getString("category_name");
		    		  data.ParentId = json_data.getInt("parent_id");
		    		  data.hasChild = json_data.getInt("has_child");
		    		  mCategoryData.add(data);
		    	  }
		    	  if(mLoadType == CHECK_USER)
		    	  {
		    		  mUserLogin = json_data.getString("user_login");
		    		  mUserPass = json_data.getString("user_pass");
		    	  }
		    	  else if(mLoadType == LOAD_AD_LIST 
		    			  || mLoadType == GET_MORE_AD
		    			  || mLoadType == GET_MORE_AD_DETAILS)
		    	  {
		    		  AdListData data = new AdListData();
		    		  data.Id = json_data.getInt("ad_uid");
		    		  data.User_id = json_data.getInt("user_id");
		    		  data.Title = json_data.getString("ad_title");
		    		  data.Category_id = json_data.getInt("ad_category");
		    		  data.Category_name = json_data.getString("category_name");
		    		  data.Desc = json_data.getString("ad_desc");
		    		  data.Add_time = json_data.getString("ad_add_time");
		    		  data.Add_date = json_data.getString("ad_add_date");
		    		  data.user_image_url = json_data.getString("user_image_url");
		    		  
		    		  mAdListData.add(data);
		    	  }
		    	  else if(mLoadType == GET_FAV_USERS_NAMES)
		    	  {
		    		  mFavUsersList.add(json_data.getString("user_login"));
		    	  }
		    	  else if(mLoadType == GET_SLIDER_URLS)
		    	  {
		    		  mSliderData.add(json_data.getString("image_url"));
		    	  }
		      }
		      
		      
		}
		catch(JSONException e1)
		{
			e1.printStackTrace();
			Log.e("doni_error", "SQL ERROR RESULT = " + result);
		    return null;
		} 
		catch (ParseException e1) 
		{
					e1.printStackTrace();
		}
		jArray = null;
		result = null;
		is = null;
		sb=null;
		
		switch (mLoadType) {
		case MAIN_DATA_CATEGORY:
			return mCategoryData;
		case GET_SLIDER_URLS:
			return mSliderData;
		case GET_MORE_AD:
			return mAdListData;
		default:
			return null;
		}
		
		
		
	}
	
	protected void onPostExecute(ArrayList<? extends Object> result) {
        // Pass the result data back to the main activity
		if(result != null)
			mDownloadDCompleteListener.getDownloadDCompleteState(mLoadType, result);
		
    	/*if(result == "no_internet")
    	{
    		//errorView(getString(R.string.no_connection));
    	}
    	if(result == "sql_error")
    	{
    		switch (mLoadType) {
			case CHECK_USER:
				WaitFragment fragment = new WaitFragment(mLoginActivity.getString(R.string.login_error));
				FragmentManager fragmentManager = mLoginActivity.getSupportFragmentManager();
				fragmentManager.beginTransaction().replace(android.R.id.content, fragment).commit();
				break;

			default:
				break;
			}
    		//errorView(getString(R.string.error_load_data));
    	}
    	else if(result == "success")
    	{
    		switch (mLoadType) {
    		case MAIN_DATA_CATEGORY:
    			mMainControlBarActivity.setCategoryData(mCategoryData);
    			break;
			case CHECK_USER:
				//mLoginActivity.loginSuccess();
				break;
			case LOAD_AD_LIST:
				if(mMainPage != null)
				{
					mMainPage.setRefreshedData(mAdListData);
					mMainPage.stopRefreshing();
				}
				break;
			case GET_MORE_AD:
				if(mMainPage != null)
				{
					mMainPage.setMoreData(mAdListData);
				}
			break;
			case GET_MORE_AD_DETAILS:
				((AdDetailsActivity)mContext).setMoreData(mAdListData);
			break;
			case GET_FAV_USERS_NAMES:
				Fragment fr = ((MainControlBarActivity)mContext).getSupportFragmentManager().findFragmentById(R.id.filter_frame);
				((FavoriteUsersFilter)fr).endDowload(mFavUsersList);
				break;
			case GET_SLIDER_URLS:
				((MainControlBarActivity)mContext).setSliderData(mSliderData);
				break;
			}
    		
    	}*/
		
		
    }
	
	public static <T extends Object> void foo(ArrayList<T> l) {
        T firstObj = l.get(0);

        if (firstObj != null) {
            if (firstObj instanceof DownloadData) {
                System.out.println("yay.. I am list of test obj " + l);
            } else {
                System.out.println("m just another list.. :( " + l);
            }
    }
	}

}
